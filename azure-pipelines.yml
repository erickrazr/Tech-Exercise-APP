

trigger:
- main

pool:
  name: Default

stages:
- stage: Docker
  displayName: Build & Push Docker image to AWS ECR
  jobs:
  - job: Build_and_Push
    displayName: Build & Push Docker image
    steps:
      
    - task: Docker@2
      displayName: Build an image
      inputs:
        command: build
        dockerfile: 'app/Dockerfile'
        buildContext: 'app/'
        repository: guestbooknode
        tags: latest
    - task: ECRPushImage@1
      inputs:
        awsCredentials: 'AWS-Cloudbrick'
        regionName: 'us-east-2'
        imageSource: 'imagename'
        sourceImageName: 'guestbooknode'
        repositoryName: 'guestbooknode'
        pushTag: latest
      

- stage: EKS
  displayName: 'EKS Infra'
  jobs:
  - job: TerraformApply
    displayName: 'EKS Deployment'
    steps:
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'
    
    - script: |
        echo "Initializing Terraform..."
        echo "no" | terraform init
      displayName: 'Terraform Init'
      workingDirectory: infra

    - script: |
        echo "Executing Terraform Plan..."
        terraform plan -out=tfplan -var 'AWS_ACCESS_KEY_ID=$(aws-access-key)' -var 'AWS_SECRET_ACCESS_KEY=$(aws-secret-key)'
      displayName: 'Terraform Plan'
      continueOnError: true # This allows the pipeline to continue even if this step "fails"
      workingDirectory: infra

    - script: |
       terraform apply "tfplan"
      workingDirectory: infra
      displayName: 'Terraform Apply'

- stage: Deploycontainers
  displayName: 'Deploy container'
  jobs:
  - job: DeployImages
    displayName: 'Deploy Crudnode Environment'
    steps:

    - script: |
        kubectl apply -f crudnode-server-deployment.yml
        kubectl apply -f crudnode-server-service.yml
      displayName: 'Deploy Node Image'
      workingDirectory: app